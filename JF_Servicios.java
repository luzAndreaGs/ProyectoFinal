package proyectoFinal;
import java.util.*;
import java.sql.*;
import java.sql.Connection;
import javax.swing.JOptionPane;

import javax.swing.*;


public class JF_Servicios extends javax.swing.JFrame {
    // Atributo para almacenar la conexión
    private Connection conn;

    /**
     * Constructor que recibe la conexión a la base de datos
     */
    public JF_Servicios(Connection conn) {
        this.conn = conn; // Inicializamos el atributo conn
        initComponents(); // Inicializamos los componentes gráficos
        inicializarComboBoxTipoServicio();
        inicializarComboBoxEstatus();
        // Cambiar el comportamiento al cerrar la ventana
        this.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        // Añadir un WindowListener para regresar al menú al cerrar
        this.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent evt) {
                regresarAlMenu();
            }
        });
    }

    // Método para regresar al menú principal
    private void regresarAlMenu() {
        new JF_Menu(conn).setVisible(true); // Abre el menú principal
        this.dispose(); // Cierra el frame actual (JF_Servicios)
    }
    
    private void inicializarComboBoxTipoServicio() {
        ComboBoxTipoServicio.addItem("Preventivo");
        ComboBoxTipoServicio.addItem("Correctivo");
    }

    private void inicializarComboBoxEstatus() {
        ComboBoxEstatus.addItem("En Espera");
        ComboBoxEstatus.addItem("En Proceso");
        ComboBoxEstatus.addItem("Finalizado");
    }

    private void limpiarCampos() {
        // Limpiar los campos de texto
        textFieldFolio.setText("");
        textFieldIDVehiculo.setText("");
        textFieldFechaServicio.setText("");
        textFieldDescripcion.setText("");
        textFieldFechaProximoServicio.setText("");
        textFieldIDRefaccion.setText("");
        textFieldCantidad.setText("");

        // Restablecer los ComboBox al valor por defecto
        ComboBoxTipoServicio.setSelectedIndex(0); // Supongamos que el índice 0 es el valor por defecto
        ComboBoxEstatus.setSelectedIndex(0);

        // Limpiar los TextArea
        VerServicios.setText("");
        VerRefacciones.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel8 = new javax.swing.JLabel();
        AgregarServicio = new javax.swing.JButton();
        MostrarServicio = new javax.swing.JButton();
        ModificarServicio = new javax.swing.JButton();
        EliminarServicio = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        ComboBoxTipoServicio = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        textFieldFolio = new javax.swing.JTextField();
        textFieldIDVehiculo = new javax.swing.JTextField();
        textFieldFechaServicio = new javax.swing.JTextField();
        textFieldDescripcion = new javax.swing.JTextField();
        textFieldFechaProximoServicio = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        textFieldIDRefaccion = new javax.swing.JTextField();
        textFieldCantidad = new javax.swing.JTextField();
        AgregarRefaccion = new javax.swing.JButton();
        EliminarRefaccion = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        VerServicios = new javax.swing.JTextArea();
        GuardarComprobante = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        VerRefacciones = new javax.swing.JTextArea();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        ComboBoxEstatus = new javax.swing.JComboBox<>();

        jLabel8.setText("Descripcion:");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Servicios");

        AgregarServicio.setText("Agregar");
        AgregarServicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AgregarServicioActionPerformed(evt);
            }
        });

        MostrarServicio.setText("Mostrar");
        MostrarServicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MostrarServicioActionPerformed(evt);
            }
        });

        ModificarServicio.setText("Modificar");
        ModificarServicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModificarServicioActionPerformed(evt);
            }
        });

        EliminarServicio.setText("Eliminar");
        EliminarServicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarServicioActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Gestión de Servicios");

        jLabel2.setText("Folio:");

        jLabel3.setText("ID Vehiculo:");

        jLabel4.setText("Tipo de Servicio:");

        ComboBoxTipoServicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBoxTipoServicioActionPerformed(evt);
            }
        });

        jLabel5.setText("Fecha del servicio:");

        jLabel6.setText("Estatus:");

        jLabel7.setText("Descripcion:");

        jLabel9.setText("Fecha proximo servicio:");

        textFieldFolio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldFolioActionPerformed(evt);
            }
        });

        textFieldIDVehiculo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldIDVehiculoActionPerformed(evt);
            }
        });

        textFieldFechaServicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldFechaServicioActionPerformed(evt);
            }
        });

        textFieldDescripcion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldDescripcionActionPerformed(evt);
            }
        });

        textFieldFechaProximoServicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldFechaProximoServicioActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel10.setText("Refacciones del Servicio");

        jLabel11.setText("ID Refaccion:");

        jLabel12.setText("Cantidad:");

        textFieldIDRefaccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldIDRefaccionActionPerformed(evt);
            }
        });

        textFieldCantidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldCantidadActionPerformed(evt);
            }
        });

        AgregarRefaccion.setText("Agregar");
        AgregarRefaccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AgregarRefaccionActionPerformed(evt);
            }
        });

        EliminarRefaccion.setText("Eliminar");
        EliminarRefaccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarRefaccionActionPerformed(evt);
            }
        });

        VerServicios.setColumns(20);
        VerServicios.setRows(5);
        jScrollPane1.setViewportView(VerServicios);

        GuardarComprobante.setText("Guardar comprobante");
        GuardarComprobante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GuardarComprobanteActionPerformed(evt);
            }
        });

        VerRefacciones.setColumns(20);
        VerRefacciones.setRows(5);
        jScrollPane2.setViewportView(VerRefacciones);

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel13.setText("Servicio");

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel14.setText("Refacciones del Servicio");

        ComboBoxEstatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBoxEstatusActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(228, 228, 228)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel10))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textFieldIDRefaccion, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel12))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(18, 18, 18)
                                .addComponent(textFieldDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(18, 18, 18)
                                .addComponent(textFieldFechaProximoServicio, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(textFieldCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addComponent(AgregarRefaccion)
                                .addGap(18, 18, 18)
                                .addComponent(EliminarRefaccion))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(AgregarServicio)
                                    .addGap(18, 18, 18)
                                    .addComponent(EliminarServicio)
                                    .addGap(18, 18, 18)
                                    .addComponent(ModificarServicio)
                                    .addGap(18, 18, 18)
                                    .addComponent(MostrarServicio)
                                    .addGap(18, 18, 18)
                                    .addComponent(GuardarComprobante))
                                .addComponent(jScrollPane1)
                                .addComponent(jScrollPane2))
                            .addComponent(jLabel14)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(textFieldFechaServicio, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(ComboBoxEstatus, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(textFieldFolio, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(textFieldIDVehiculo, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ComboBoxTipoServicio, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(textFieldFolio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textFieldIDVehiculo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(ComboBoxTipoServicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(textFieldFechaServicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(ComboBoxEstatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(textFieldDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(textFieldFechaProximoServicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12)
                    .addComponent(textFieldIDRefaccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textFieldCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AgregarRefaccion)
                    .addComponent(EliminarRefaccion))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AgregarServicio)
                    .addComponent(EliminarServicio)
                    .addComponent(ModificarServicio)
                    .addComponent(MostrarServicio)
                    .addComponent(GuardarComprobante))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textFieldFolioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldFolioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textFieldFolioActionPerformed

    private void textFieldIDVehiculoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldIDVehiculoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textFieldIDVehiculoActionPerformed

    private void textFieldFechaServicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldFechaServicioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textFieldFechaServicioActionPerformed

    private void textFieldDescripcionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldDescripcionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textFieldDescripcionActionPerformed

    private void textFieldFechaProximoServicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldFechaProximoServicioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textFieldFechaProximoServicioActionPerformed

    private void textFieldIDRefaccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldIDRefaccionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textFieldIDRefaccionActionPerformed

    private void textFieldCantidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldCantidadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textFieldCantidadActionPerformed

    private void ComboBoxTipoServicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBoxTipoServicioActionPerformed
        String tipoServicioSeleccionado = (String) ComboBoxTipoServicio.getSelectedItem();
    }//GEN-LAST:event_ComboBoxTipoServicioActionPerformed

    private void AgregarRefaccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AgregarRefaccionActionPerformed
            try {
            int folioServicio = Integer.parseInt(textFieldFolio.getText());
            int idRefaccion = Integer.parseInt(textFieldIDRefaccion.getText());
            int cantidad = Integer.parseInt(textFieldCantidad.getText());

            GestionarServicios.agregarRefaccionesAlServicio(conn, folioServicio, idRefaccion, cantidad);

            int respuesta = JOptionPane.showConfirmDialog(this, "¿Desea agregar otra refacción?", "Confirmación", JOptionPane.YES_NO_OPTION);
            if (respuesta == JOptionPane.NO_OPTION) {
                JOptionPane.showMessageDialog(this, "Refacción(es) añadida(s) correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                // Limpiar los campos después de agregar
                limpiarCampos();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al agregar la refacción: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_AgregarRefaccionActionPerformed

    private void EliminarRefaccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarRefaccionActionPerformed
        try {
            // Validar la conexión
            if (conn == null) {
                JOptionPane.showMessageDialog(this, "Error: No hay conexión a la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Obtener valores desde los campos de texto
            int folioServicio = Integer.parseInt(textFieldFolio.getText().trim());
            int idRefaccion = Integer.parseInt(textFieldIDRefaccion.getText().trim());
            int cantidadEliminar = Integer.parseInt(textFieldCantidad.getText().trim());

            // Validar si el servicio existe
            if (!GestionarServicios.existeServicio(conn, folioServicio)) {
                JOptionPane.showMessageDialog(this, "El servicio con el folio " + folioServicio + " no existe.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Intentar eliminar la cantidad especificada de la refacción
            boolean resultado = GestionarServicios.eliminarCantidadRefaccion(conn, folioServicio, idRefaccion, cantidadEliminar);

            if (resultado) {
                int respuesta = JOptionPane.showConfirmDialog(this, "¿Desea eliminar otra refacción?", "Confirmación", JOptionPane.YES_NO_OPTION);
                if (respuesta == JOptionPane.NO_OPTION) {
                    JOptionPane.showMessageDialog(this, "Refacción eliminada correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                    // Limpiar los campos después de eliminar
                    limpiarCampos();
                }
            } else {
                JOptionPane.showMessageDialog(this, "No se pudo eliminar la cantidad especificada. Verifique que exista suficiente cantidad.", "Error", JOptionPane.WARNING_MESSAGE);
            }

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Los valores ingresados deben ser números válidos.", "Error de formato", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al eliminar la refacción: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_EliminarRefaccionActionPerformed

    private void AgregarServicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AgregarServicioActionPerformed
        try {
            int folioServicio = Integer.parseInt(textFieldFolio.getText());
            int idVehiculo = Integer.parseInt(textFieldIDVehiculo.getText());
            String tipoServicio = ComboBoxTipoServicio.getSelectedItem().toString();
            String fecha = textFieldFechaServicio.getText();
            String estatus = ComboBoxEstatus.getSelectedItem().toString();
            String descripcion = textFieldDescripcion.getText();
            String fechaProximoServicio = textFieldFechaProximoServicio.getText();

            // Validar que los campos requeridos no estén vacíos
            if (folioServicio <= 0 || idVehiculo <= 0 || tipoServicio.isEmpty() || fecha.isEmpty() || estatus.isEmpty() || descripcion.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Por favor, complete todos los campos requeridos.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Validar si el vehículo existe
            if (!GestionarVehiculos.existeVehiculo(conn, idVehiculo)) {
                JOptionPane.showMessageDialog(this, "El vehículo no existe. Por favor, regístrelo primero.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Llamar al método registrarServicio
            GestionarServicios.registrarServicio(conn, folioServicio, idVehiculo, tipoServicio, fecha, estatus, descripcion, fechaProximoServicio);
            JOptionPane.showMessageDialog(this, "Servicio registrado exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            // Limpiar los campos después de agregar
            limpiarCampos();
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Error en los campos. Asegúrese de ingresar todos los datos correctamente.", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al registrar el servicio", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_AgregarServicioActionPerformed

    private void EliminarServicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarServicioActionPerformed
        try {
            // Obtener el folio del servicio del campo de texto
            int folioServicio = Integer.parseInt(textFieldFolio.getText().trim());

            // Verificar si el servicio existe
            if (!GestionarServicios.existeServicio(conn, folioServicio)) {
                JOptionPane.showMessageDialog(this, "El servicio con el folio " + folioServicio + " no existe.", "Error", JOptionPane.ERROR_MESSAGE);
                return; // Termina el método si el servicio no existe
            }

            // Intentar eliminar el servicio
            GestionarServicios.eliminarServicio(conn, folioServicio);
            JOptionPane.showMessageDialog(this, "Servicio eliminado exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            // Limpiar los campos después de eliminar
            limpiarCampos();
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese un folio válido.", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al eliminar el servicio", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_EliminarServicioActionPerformed

    private void ModificarServicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModificarServicioActionPerformed
        try {
            // Validar la conexión
            if (conn == null) {
                JOptionPane.showMessageDialog(this, "Error: No hay conexión a la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Obtener los valores de los campos del formulario
            int folioServicio = Integer.parseInt(textFieldFolio.getText().trim());
            String tipoServicio = (String) ComboBoxTipoServicio.getSelectedItem(); // Tipo de servicio del combo box
            String fecha = textFieldFechaServicio.getText().trim();
            String estatus = (String) ComboBoxEstatus.getSelectedItem(); // Estatus del combo box
            String descripcion = textFieldDescripcion.getText().trim();
            String fechaProximoServicio = textFieldFechaProximoServicio.getText().trim();

            // Validar si el servicio existe
            if (!GestionarServicios.existeServicio(conn, folioServicio)) {
                JOptionPane.showMessageDialog(this, "El servicio con el folio " + folioServicio + " no existe.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Llamar al método para modificar el servicio
            boolean modificado = GestionarServicios.modificarServicio(
                conn, folioServicio, tipoServicio, fecha, estatus, descripcion, fechaProximoServicio
            );

            if (modificado) {
                JOptionPane.showMessageDialog(this, "Servicio modificado exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                // Limpiar los campos después de agregar
                limpiarCampos();
            } else {
                JOptionPane.showMessageDialog(this, "Error al modificar el servicio. Intente nuevamente.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese valores válidos.", "Error de formato", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al modificar el servicio", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_ModificarServicioActionPerformed

    private void MostrarServicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MostrarServicioActionPerformed
        try {
            // Validar la conexión
            if (conn == null) {
                JOptionPane.showMessageDialog(this, "Error: No hay conexión a la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Mostrar cuadro de diálogo para seleccionar el tipo de consulta
            Object[] opciones = {"Por Folio", "Por ID Cliente"};
            int opcion = JOptionPane.showOptionDialog(this, "¿Cómo desea buscar los servicios?", 
                                                      "Seleccionar Tipo de Búsqueda", 
                                                      JOptionPane.YES_NO_OPTION, 
                                                      JOptionPane.QUESTION_MESSAGE, 
                                                      null, opciones, opciones[0]);

            if (opcion == JOptionPane.YES_OPTION) { // Buscar por folio
                String inputFolio = JOptionPane.showInputDialog(this, "Ingrese el folio del servicio:");

                if (inputFolio == null || inputFolio.trim().isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Por favor, ingrese un folio válido.", "Campo vacío", JOptionPane.WARNING_MESSAGE);
                    return;
                }

                int folioServicio;
                try {
                    folioServicio = Integer.parseInt(inputFolio.trim());
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "El folio debe ser un número válido.", "Error de formato", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                // Mostrar servicios por folio
                mostrarServiciosPorFolio(folioServicio);

            } else if (opcion == JOptionPane.NO_OPTION) { // Buscar por ID cliente
                String inputIdCliente = JOptionPane.showInputDialog(this, "Ingrese el ID del cliente:");

                if (inputIdCliente == null || inputIdCliente.trim().isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Por favor, ingrese un ID válido.", "Campo vacío", JOptionPane.WARNING_MESSAGE);
                    return;
                }

                int idCliente;
                try {
                    idCliente = Integer.parseInt(inputIdCliente.trim());
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "El ID del cliente debe ser un número válido.", "Error de formato", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                // Mostrar servicios por ID cliente
                mostrarServiciosPorCliente(idCliente);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al mostrar los servicios: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

    // Método para mostrar servicios por folio
    private void mostrarServiciosPorFolio(int folioServicio) throws SQLException {
        String queryServicio = "SELECT * FROM Servicio WHERE folioServicio = ?";
        PreparedStatement stmtServicio = conn.prepareStatement(queryServicio);
        stmtServicio.setInt(1, folioServicio);

        ResultSet rsServicio = stmtServicio.executeQuery();
        StringBuilder servicios = new StringBuilder();

        if (rsServicio.next()) {
            servicios.append("Folio: ").append(rsServicio.getInt("folioServicio")).append("\n")
                     .append("Tipo: ").append(rsServicio.getString("tipoServicio")).append("\n")
                     .append("ID Vehículo: ").append(rsServicio.getInt("idVehiculo")).append("\n")
                     .append("Fecha: ").append(rsServicio.getDate("fecha")).append("\n")
                     .append("Estatus: ").append(rsServicio.getString("estatus")).append("\n")
                     .append("Descripción: ").append(rsServicio.getString("descripcion")).append("\n")
                     .append("Próximo Servicio: ").append(rsServicio.getDate("fechaProximoServicio")).append("\n\n");
        } else {
            JOptionPane.showMessageDialog(this, "No se encontró ningún servicio con el folio ingresado.", "Sin resultados", JOptionPane.INFORMATION_MESSAGE);
            VerServicios.setText("");
            VerRefacciones.setText("");
            return;
        }

        VerServicios.setText(servicios.toString());
        mostrarRefacciones(folioServicio);
    }

    // Método para mostrar servicios por ID cliente
private void mostrarServiciosPorCliente(int idCliente) throws SQLException {
    String queryServicio = "SELECT s.folioServicio, s.tipoServicio, s.idVehiculo, s.fecha, s.estatus, s.descripcion, s.fechaProximoServicio " +
                           "FROM Servicio s JOIN Vehiculo v ON s.idVehiculo = v.idVehiculo WHERE v.idCliente = ?";
    PreparedStatement stmtServicio = conn.prepareStatement(queryServicio);
    stmtServicio.setInt(1, idCliente);

    ResultSet rsServicio = stmtServicio.executeQuery();
    StringBuilder servicios = new StringBuilder();
    StringBuilder refacciones = new StringBuilder();

    while (rsServicio.next()) {
        int folioServicio = rsServicio.getInt("folioServicio");

        // Añadir información del servicio
        servicios.append("Folio: ").append(folioServicio).append("\n")
                 .append("Tipo: ").append(rsServicio.getString("tipoServicio")).append("\n")
                 .append("ID Vehículo: ").append(rsServicio.getInt("idVehiculo")).append("\n")
                 .append("Fecha: ").append(rsServicio.getDate("fecha")).append("\n")
                 .append("Estatus: ").append(rsServicio.getString("estatus")).append("\n")
                 .append("Descripción: ").append(rsServicio.getString("descripcion")).append("\n")
                 .append("Próximo Servicio: ").append(rsServicio.getDate("fechaProximoServicio")).append("\n\n");

        // Obtener las refacciones asociadas a este servicio
        String queryRefacciones = "SELECT r.idRefaccion, r.nombre, sr.cantidad " +
                                  "FROM Servicio_Refaccion sr JOIN Refaccion r ON sr.idRefaccion = r.idRefaccion " +
                                  "WHERE sr.idServicio = ?";
        PreparedStatement stmtRefacciones = conn.prepareStatement(queryRefacciones);
        stmtRefacciones.setInt(1, folioServicio);

        ResultSet rsRefacciones = stmtRefacciones.executeQuery();
        refacciones.append("Refacciones para el servicio con folio ").append(folioServicio).append(":\n");

        boolean hayRefacciones = false;
        while (rsRefacciones.next()) {
            hayRefacciones = true;
            refacciones.append("ID Refacción: ").append(rsRefacciones.getInt("idRefaccion")).append("\n")
                       .append("Nombre: ").append(rsRefacciones.getString("nombre")).append("\n")
                       .append("Cantidad: ").append(rsRefacciones.getInt("cantidad")).append("\n\n");
        }

        if (!hayRefacciones) {
            refacciones.append("No hay refacciones asociadas a este servicio.\n\n");
        }
    }

    // Mostrar resultados en los TextAreas
    if (servicios.length() > 0) {
        VerServicios.setText(servicios.toString());
        VerRefacciones.setText(refacciones.toString());
    } else {
        JOptionPane.showMessageDialog(this, "No se encontraron servicios asociados al cliente ingresado.", "Sin resultados", JOptionPane.INFORMATION_MESSAGE);
        VerServicios.setText("");
        VerRefacciones.setText("");
    }
    }

    // Método para mostrar refacciones asociadas a un servicio
    private void mostrarRefacciones(int folioServicio) throws SQLException {
        String queryRefacciones = "SELECT r.idRefaccion, r.nombre, sr.cantidad FROM Servicio_Refaccion sr JOIN Refaccion r ON sr.idRefaccion = r.idRefaccion WHERE sr.idServicio = ?";
        PreparedStatement stmtRefacciones = conn.prepareStatement(queryRefacciones);
        stmtRefacciones.setInt(1, folioServicio);

        ResultSet rsRefacciones = stmtRefacciones.executeQuery();
        StringBuilder refacciones = new StringBuilder();

        while (rsRefacciones.next()) {
            refacciones.append("ID Refacción: ").append(rsRefacciones.getInt("idRefaccion")).append("\n")
                       .append("Nombre: ").append(rsRefacciones.getString("nombre")).append("\n")
                       .append("Cantidad: ").append(rsRefacciones.getInt("cantidad")).append("\n\n");
        }

        if (refacciones.length() > 0) {
            VerRefacciones.setText(refacciones.toString());
        } else {
            VerRefacciones.setText("No hay refacciones asociadas.");
        }
    }//GEN-LAST:event_MostrarServicioActionPerformed

    private void GuardarComprobanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GuardarComprobanteActionPerformed
        try {
            // Validar la conexión
            if (conn == null) {
                JOptionPane.showMessageDialog(this, "Error: No hay conexión a la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Obtener el folio del servicio del campo de texto
            String input = textFieldFolio.getText().trim();
            if (input.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Por favor, ingrese el folio del servicio.", "Campo vacío", JOptionPane.WARNING_MESSAGE);
                return;
            }

            int folioServicio;
            try {
                folioServicio = Integer.parseInt(input);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "El folio debe ser un número válido.", "Error de formato", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Validar si el servicio existe
            if (!GestionarServicios.existeServicio(conn, folioServicio)) {
                JOptionPane.showMessageDialog(this, "El servicio con el folio " + folioServicio + " no existe.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Seleccionar la ruta de guardado
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setDialogTitle("Selecciona la ubicación para guardar el comprobante");
            int userSelection = fileChooser.showSaveDialog(this);

            if (userSelection == JFileChooser.APPROVE_OPTION) {
                String rutaArchivo = fileChooser.getSelectedFile().getAbsolutePath();
                if (!rutaArchivo.endsWith(".pdf")) {
                    rutaArchivo += ".pdf"; // Agregar extensión si no está presente
                }

                // Llamar al método para generar el PDF
                GestionarServicios.generarPDF(conn, folioServicio, rutaArchivo);

                JOptionPane.showMessageDialog(this, "Comprobante guardado exitosamente en:\n" + rutaArchivo, "Éxito", JOptionPane.INFORMATION_MESSAGE);
                // Limpiar los campos después de agregar
                limpiarCampos();
            } else {
                JOptionPane.showMessageDialog(this, "Guardado cancelado.", "Cancelación", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al guardar el comprobante: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_GuardarComprobanteActionPerformed

    private void ComboBoxEstatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBoxEstatusActionPerformed
        String estatusSeleccionado = (String) ComboBoxEstatus.getSelectedItem();
    }//GEN-LAST:event_ComboBoxEstatusActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        Connection conn = ConnectDB.getConnection(); // Obtenemos la conexión a la base de datos

        if (conn == null) {
            System.out.println("Error: No se pudo establecer conexión con la base de datos.");
            return;
        }
      
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JF_Servicios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JF_Servicios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JF_Servicios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JF_Servicios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JF_Servicios(conn).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AgregarRefaccion;
    private javax.swing.JButton AgregarServicio;
    private javax.swing.JComboBox<String> ComboBoxEstatus;
    private javax.swing.JComboBox<String> ComboBoxTipoServicio;
    private javax.swing.JButton EliminarRefaccion;
    private javax.swing.JButton EliminarServicio;
    private javax.swing.JButton GuardarComprobante;
    private javax.swing.JButton ModificarServicio;
    private javax.swing.JButton MostrarServicio;
    private javax.swing.JTextArea VerRefacciones;
    private javax.swing.JTextArea VerServicios;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField textFieldCantidad;
    private javax.swing.JTextField textFieldDescripcion;
    private javax.swing.JTextField textFieldFechaProximoServicio;
    private javax.swing.JTextField textFieldFechaServicio;
    private javax.swing.JTextField textFieldFolio;
    private javax.swing.JTextField textFieldIDRefaccion;
    private javax.swing.JTextField textFieldIDVehiculo;
    // End of variables declaration//GEN-END:variables
}
