package proyectoFinal;
import java.sql.Connection;
import javax.swing.JOptionPane;
import java.sql.*;

public class JF_Vehiculos extends javax.swing.JFrame {
    private Connection conn;

    /**
     * Creates new form JF_Vehiculos
     */
    public JF_Vehiculos(Connection conn) {
        this.conn = conn; // Guardamos la conexión
        initComponents(); // Inicializamos los componentes gráficos
        
        // Cambiar el comportamiento al cerrar la ventana
        this.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        // Añadir un WindowListener para regresar al menú al cerrar
        this.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent evt) {
                regresarAlMenu();
            }
        });
    }
    
    // Método para regresar al menú principal
    private void regresarAlMenu() {
        new JF_Menu(conn).setVisible(true); // Abre el menú principal
        this.dispose();
    }
    
    private void limpiarCampos() {
        TextFieldMarca.setText("");
        TextFieldModelo.setText("");
        TextFieldAño.setText("");
        TextFieldIDCliente.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        TextFieldMarca = new javax.swing.JTextField();
        TextFieldModelo = new javax.swing.JTextField();
        TextFieldAño = new javax.swing.JTextField();
        TextFieldIDCliente = new javax.swing.JTextField();
        RegistrarVehiculo = new javax.swing.JButton();
        ModificarVehiculo = new javax.swing.JButton();
        EliminarVehiculo = new javax.swing.JButton();
        MostrarVehiculos = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        VerVehiculos = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Gestión de Vehiculos");

        jLabel2.setText("Marca:");

        jLabel3.setText("Modelo:");

        jLabel4.setText("Año del Vehiculo:");

        jLabel5.setText("ID Cliente (Propietario):");

        TextFieldMarca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextFieldMarcaActionPerformed(evt);
            }
        });

        TextFieldModelo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextFieldModeloActionPerformed(evt);
            }
        });

        TextFieldAño.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextFieldAñoActionPerformed(evt);
            }
        });

        TextFieldIDCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextFieldIDClienteActionPerformed(evt);
            }
        });

        RegistrarVehiculo.setText("Registrar");
        RegistrarVehiculo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegistrarVehiculoActionPerformed(evt);
            }
        });

        ModificarVehiculo.setText("Modificar");
        ModificarVehiculo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModificarVehiculoActionPerformed(evt);
            }
        });

        EliminarVehiculo.setText("Eliminar");
        EliminarVehiculo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarVehiculoActionPerformed(evt);
            }
        });

        MostrarVehiculos.setText("Mostrar");
        MostrarVehiculos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MostrarVehiculosActionPerformed(evt);
            }
        });

        VerVehiculos.setColumns(20);
        VerVehiculos.setRows(5);
        jScrollPane1.setViewportView(VerVehiculos);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(71, 71, 71)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(RegistrarVehiculo, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(MostrarVehiculos, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(ModificarVehiculo, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(EliminarVehiculo, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TextFieldMarca, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TextFieldModelo, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(103, 103, 103)
                                .addComponent(jLabel1)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TextFieldAño, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TextFieldIDCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(TextFieldMarca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TextFieldModelo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(TextFieldAño, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TextFieldIDCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RegistrarVehiculo)
                    .addComponent(ModificarVehiculo))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EliminarVehiculo)
                    .addComponent(MostrarVehiculos))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void RegistrarVehiculoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegistrarVehiculoActionPerformed
        try {
            // Validar conexión
            if (conn == null) {
                JOptionPane.showMessageDialog(this, "Error: No hay conexión a la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Obtener los datos del formulario
            String marca = TextFieldMarca.getText().trim();
            String modelo = TextFieldModelo.getText().trim();
            String añoTexto = TextFieldAño.getText().trim();
            String idClienteTexto = TextFieldIDCliente.getText().trim();

            // Validar campos vacíos
            if (marca.isEmpty() || modelo.isEmpty() || añoTexto.isEmpty() || idClienteTexto.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Por favor, complete todos los campos.", "Campos vacíos", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Validar que el año e idCliente sean números
            int año, idCliente;
            try {
                año = Integer.parseInt(añoTexto);
                idCliente = Integer.parseInt(idClienteTexto);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "El año y el ID del cliente deben ser números válidos.", "Error de formato", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Validar que el cliente exista en la base de datos
            if (!GestionarClientes.existeCliente(conn, idCliente)) {
                JOptionPane.showMessageDialog(this, "El cliente con ID " + idCliente + " no existe.", "Cliente no encontrado", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Registrar el vehículo en la base de datos
            if (GestionarVehiculos.registrarVehiculo(conn, marca, modelo, año, idCliente)) {
                JOptionPane.showMessageDialog(this, "Vehículo registrado exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                limpiarCampos();
            } else {
                JOptionPane.showMessageDialog(this, "Error al registrar el vehículo.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al registrar el vehículo: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_RegistrarVehiculoActionPerformed

    private void TextFieldMarcaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextFieldMarcaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextFieldMarcaActionPerformed

    private void TextFieldModeloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextFieldModeloActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextFieldModeloActionPerformed

    private void TextFieldAñoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextFieldAñoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextFieldAñoActionPerformed

    private void TextFieldIDClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextFieldIDClienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextFieldIDClienteActionPerformed

    private void ModificarVehiculoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModificarVehiculoActionPerformed
        try {
            // Validar conexión
            if (conn == null) {
                JOptionPane.showMessageDialog(this, "Error: No hay conexión a la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Solicitar el ID del vehículo mediante un cuadro de diálogo
            String idVehiculoInput = JOptionPane.showInputDialog(this, "Ingrese el ID del vehículo que desea modificar:", "Modificar Vehículo", JOptionPane.QUESTION_MESSAGE);
            if (idVehiculoInput == null || idVehiculoInput.trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Debe ingresar un ID válido.", "ID Vehículo requerido", JOptionPane.WARNING_MESSAGE);
                return;
            }

            int idVehiculo;
            try {
                idVehiculo = Integer.parseInt(idVehiculoInput.trim());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "El ID del vehículo debe ser un número válido.", "Error de formato", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Verificar si el vehículo existe
            if (!GestionarVehiculos.existeVehiculo(conn, idVehiculo)) {
                JOptionPane.showMessageDialog(this, "El vehículo con ID " + idVehiculo + " no existe.", "Vehículo no encontrado", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Obtener los datos ingresados en el formulario
            String nuevaMarca = TextFieldMarca.getText().trim();
            String nuevoModelo = TextFieldModelo.getText().trim();
            String nuevoAñoTexto = TextFieldAño.getText().trim();
            String nuevoIdClienteTexto = TextFieldIDCliente.getText().trim();

            // Validar campos vacíos
            if (nuevaMarca.isEmpty() || nuevoModelo.isEmpty() || nuevoAñoTexto.isEmpty() || nuevoIdClienteTexto.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Por favor, complete todos los campos.", "Campos vacíos", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Validar que año e ID del cliente sean números
            int nuevoAño, nuevoIdCliente;
            try {
                nuevoAño = Integer.parseInt(nuevoAñoTexto);
                nuevoIdCliente = Integer.parseInt(nuevoIdClienteTexto);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "El año y el ID del cliente deben ser números válidos.", "Error de formato", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Verificar si el cliente existe
            if (!GestionarClientes.existeCliente(conn, nuevoIdCliente)) {
                JOptionPane.showMessageDialog(this, "El cliente con ID " + nuevoIdCliente + " no existe.", "Cliente no encontrado", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Modificar el vehículo
            if (GestionarVehiculos.modificarVehiculo(conn, idVehiculo, nuevaMarca, nuevoModelo, nuevoAño, nuevoIdCliente)) {
                JOptionPane.showMessageDialog(this, "Vehículo modificado exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                limpiarCampos();
            } else {
                JOptionPane.showMessageDialog(this, "Error al modificar el vehículo.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al modificar el vehículo: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_ModificarVehiculoActionPerformed

    private void EliminarVehiculoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarVehiculoActionPerformed
        try {
            // Validar conexión
            if (conn == null) {
                JOptionPane.showMessageDialog(this, "Error: No hay conexión a la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Solicitar el ID del vehículo mediante un cuadro de diálogo
            String idVehiculoInput = JOptionPane.showInputDialog(this, "Ingrese el ID del vehículo que desea eliminar:", "Eliminar Vehículo", JOptionPane.QUESTION_MESSAGE);
            if (idVehiculoInput == null || idVehiculoInput.trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Debe ingresar un ID válido.", "ID Vehículo requerido", JOptionPane.WARNING_MESSAGE);
                return;
            }

            int idVehiculo;
            try {
                idVehiculo = Integer.parseInt(idVehiculoInput.trim());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "El ID del vehículo debe ser un número válido.", "Error de formato", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Verificar si el vehículo existe
            if (!GestionarVehiculos.existeVehiculo(conn, idVehiculo)) {
                JOptionPane.showMessageDialog(this, "El vehículo con ID " + idVehiculo + " no existe.", "Vehículo no encontrado", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Confirmar la eliminación
            int confirmacion = JOptionPane.showConfirmDialog(this, "¿Está seguro de que desea eliminar el vehículo con ID " + idVehiculo + "?", "Confirmación", JOptionPane.YES_NO_OPTION);
            if (confirmacion != JOptionPane.YES_OPTION) {
                return; // Salir si el usuario no confirma la eliminación
            }

            // Eliminar el vehículo
            if (GestionarVehiculos.eliminarVehiculo(conn, idVehiculo)) {
                JOptionPane.showMessageDialog(this, "Vehículo eliminado exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Error al eliminar el vehículo.", "Error", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al eliminar el vehículo: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_EliminarVehiculoActionPerformed

    private void MostrarVehiculosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MostrarVehiculosActionPerformed
        try {
            // Validar la conexión
            if (conn == null) {
                JOptionPane.showMessageDialog(this, "Error: No hay conexión a la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Consulta SQL para obtener la lista de vehículos con el nombre completo del propietario
            String query = "SELECT v.idVehiculo, v.marca, v.modelo, v.año, " +
                           "CONCAT(p.nombre, ' ', p.apellidoPaterno, ' ', p.apellidoMaterno) AS propietario " +
                           "FROM Vehiculo v " +
                           "JOIN Cliente c ON v.idCliente = c.idCliente " +
                           "JOIN Persona p ON c.idPersona = p.idPersona";

            try (PreparedStatement stmt = conn.prepareStatement(query)) {
                ResultSet rs = stmt.executeQuery();

                // Construir el texto para mostrar los vehículos
                StringBuilder vehiculos = new StringBuilder();
                vehiculos.append("===== Lista de Vehiculos =====\n\n");
                
                while (rs.next()) {
                    vehiculos.append("ID Vehículo: ").append(rs.getInt("idVehiculo")).append("\n")
                             .append("Marca: ").append(rs.getString("marca")).append("\n")
                             .append("Modelo: ").append(rs.getString("modelo")).append("\n")
                             .append("Año: ").append(rs.getInt("año")).append("\n")
                             .append("Propietario: ").append(rs.getString("propietario")).append("\n")
                             .append("-------------------------------\n");
                }

                // Mostrar los vehículos en el TextArea
                if (vehiculos.length() > 0) {
                    VerVehiculos.setText(vehiculos.toString());
                } else {
                    VerVehiculos.setText("No hay vehículos registrados.");
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al mostrar los vehículos: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_MostrarVehiculosActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        Connection conn = ConnectDB.getConnection(); // Obtenemos la conexión a la base de datos

        if (conn == null) {
            System.out.println("Error: No se pudo establecer conexión con la base de datos.");
            return;
        }
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JF_Vehiculos(conn).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton EliminarVehiculo;
    private javax.swing.JButton ModificarVehiculo;
    private javax.swing.JButton MostrarVehiculos;
    private javax.swing.JButton RegistrarVehiculo;
    private javax.swing.JTextField TextFieldAño;
    private javax.swing.JTextField TextFieldIDCliente;
    private javax.swing.JTextField TextFieldMarca;
    private javax.swing.JTextField TextFieldModelo;
    private javax.swing.JTextArea VerVehiculos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
