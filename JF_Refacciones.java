package proyectoFinal;
import java.sql.Connection;
import javax.swing.JOptionPane;
import java.sql.*;

public class JF_Refacciones extends javax.swing.JFrame {
    private Connection conn;

    /**
     * Creates new form JF_Vehiculos
     */
    public JF_Refacciones(Connection conn) {
        this.conn = conn; // Guardamos la conexión
        initComponents(); // Inicializamos los componentes gráficos
        
        // Cambiar el comportamiento al cerrar la ventana
        this.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        // Añadir un WindowListener para regresar al menú al cerrar
        this.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent evt) {
                regresarAlMenu();
            }
        });
    }
    
    // Método para regresar al menú principal
    private void regresarAlMenu() {
        new JF_Menu(conn).setVisible(true); // Abre el menú principal
        this.dispose(); 
    }
    
    private void limpiarCampos() {
        TextFieldNombre.setText("");
        TextFieldDescripcion.setText("");
        TextFieldCosto.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        TextFieldNombre = new javax.swing.JTextField();
        TextFieldDescripcion = new javax.swing.JTextField();
        TextFieldCosto = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        VerRefacciones = new javax.swing.JTextArea();
        RegistrarRefaccion = new javax.swing.JButton();
        MostrarRefaccion = new javax.swing.JButton();
        ModificarRefaccion = new javax.swing.JButton();
        EliminarRefaccion = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Gestión de Refacciones");

        jLabel2.setText("Nombre:");

        jLabel3.setText("Descripcion:");

        jLabel4.setText("Costo:");

        TextFieldNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextFieldNombreActionPerformed(evt);
            }
        });

        TextFieldDescripcion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextFieldDescripcionActionPerformed(evt);
            }
        });

        TextFieldCosto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextFieldCostoActionPerformed(evt);
            }
        });

        VerRefacciones.setColumns(20);
        VerRefacciones.setRows(5);
        jScrollPane1.setViewportView(VerRefacciones);

        RegistrarRefaccion.setText("Registrar");
        RegistrarRefaccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegistrarRefaccionActionPerformed(evt);
            }
        });

        MostrarRefaccion.setText("Mostrar");
        MostrarRefaccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MostrarRefaccionActionPerformed(evt);
            }
        });

        ModificarRefaccion.setText("Modificar");
        ModificarRefaccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModificarRefaccionActionPerformed(evt);
            }
        });

        EliminarRefaccion.setText("Eliminar");
        EliminarRefaccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarRefaccionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TextFieldDescripcion))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TextFieldNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TextFieldCosto, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(99, 99, 99)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(31, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(MostrarRefaccion, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RegistrarRefaccion, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ModificarRefaccion, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(EliminarRefaccion, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(82, 82, 82))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(TextFieldNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(TextFieldCosto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(TextFieldDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RegistrarRefaccion)
                    .addComponent(ModificarRefaccion))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MostrarRefaccion)
                    .addComponent(EliminarRefaccion))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TextFieldNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextFieldNombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextFieldNombreActionPerformed

    private void TextFieldCostoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextFieldCostoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextFieldCostoActionPerformed

    private void TextFieldDescripcionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextFieldDescripcionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextFieldDescripcionActionPerformed

    private void RegistrarRefaccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegistrarRefaccionActionPerformed
    try {
         // Obtener los datos de los campos de texto
         String nombre = TextFieldNombre.getText().trim();
         String descripcion = TextFieldDescripcion.getText().trim();
         String costoTexto = TextFieldCosto.getText().trim(); // Asegúrate de que el nombre del campo es correcto

         // Validar que los campos no estén vacíos
         if (nombre.isEmpty() || descripcion.isEmpty() || costoTexto.isEmpty()) {
             JOptionPane.showMessageDialog(this, "Por favor, complete todos los campos.", "Error", JOptionPane.ERROR_MESSAGE);
             return;
         }

         // Convertir el costo a double
         double costo;
         try {
             costo = Double.parseDouble(costoTexto);
         } catch (NumberFormatException e) {
             JOptionPane.showMessageDialog(this, "El costo debe ser un número válido.", "Error", JOptionPane.ERROR_MESSAGE);
             return;
         }

         // Llamar al método para registrar la refacción
         boolean resultado = GestionarRefacciones.registrarRefaccion(conn, nombre, descripcion, costo);

         // Verificar si el registro fue exitoso
         if (resultado) {
             JOptionPane.showMessageDialog(this, "Refacción registrada exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
             limpiarCampos(); // Limpiar los campos después de registrar
         } else {
             JOptionPane.showMessageDialog(this, "Error al registrar la refacción.", "Error", JOptionPane.ERROR_MESSAGE);
         }
     } catch (Exception e) {
         JOptionPane.showMessageDialog(this, "Error al registrar la refacción: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
     }
    }//GEN-LAST:event_RegistrarRefaccionActionPerformed

    private void ModificarRefaccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModificarRefaccionActionPerformed
        try {
            // Obtener los datos de los campos de texto
            String nuevoNombre = TextFieldNombre.getText().trim();
            String nuevaDescripcion = TextFieldDescripcion.getText().trim();
            String costoTexto = TextFieldCosto.getText().trim();

            // Validar que los campos no estén vacíos
            if (nuevoNombre.isEmpty() || nuevaDescripcion.isEmpty() || costoTexto.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Por favor, complete todos los campos.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Convertir el costo a double
            double nuevoCosto;
            try {
                nuevoCosto = Double.parseDouble(costoTexto);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "El costo debe ser un número válido.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Solicitar el ID de la refacción a modificar
            String idTexto = JOptionPane.showInputDialog(this, "Ingrese el ID de la refacción a modificar:");
            if (idTexto == null || idTexto.trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "El ID de la refacción no puede estar vacío.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            int idRefaccion;
            try {
                idRefaccion = Integer.parseInt(idTexto.trim());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "El ID debe ser un número válido.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Verificar si la refacción existe
            if (!GestionarRefacciones.existeRefaccion(conn, idRefaccion)) {
                JOptionPane.showMessageDialog(this, "La refacción con ID " + idRefaccion + " no existe.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Llamar al método para modificar la refacción
            boolean resultado = GestionarRefacciones.modificarRefaccion(conn, idRefaccion, nuevoNombre, nuevaDescripcion, nuevoCosto);

            // Mostrar mensaje según el resultado
            if (resultado) {
                JOptionPane.showMessageDialog(this, "Refacción modificada exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                limpiarCampos(); // Limpiar los campos después de modificar
            } else {
                JOptionPane.showMessageDialog(this, "Error al modificar la refacción.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al modificar la refacción: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_ModificarRefaccionActionPerformed

    private void MostrarRefaccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MostrarRefaccionActionPerformed
        try {
            // Validar la conexión
            if (conn == null) {
                JOptionPane.showMessageDialog(this, "Error: No hay conexión a la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Consulta para obtener las refacciones
            String query = "SELECT * FROM Refaccion";
            PreparedStatement stmt = conn.prepareStatement(query);
            ResultSet rs = stmt.executeQuery();

            // Construir el texto para mostrar en el TextArea
            StringBuilder refacciones = new StringBuilder();
            refacciones.append("===== Lista de Refacciones =====\n\n");

            while (rs.next()) {
                refacciones.append("ID: ").append(rs.getInt("idRefaccion")).append("\n")
                           .append("Nombre: ").append(rs.getString("nombre")).append("\n")
                           .append("Descripción: ").append(rs.getString("descripcion")).append("\n")
                           .append("Costo: $").append(String.format("%.2f", rs.getDouble("costo"))).append("\n")
                           .append("-------------------------------------\n");
            }

            // Mostrar las refacciones en el TextArea
            if (refacciones.length() > 0) {
                VerRefacciones.setText(refacciones.toString());
            } else {
                VerRefacciones.setText("No hay refacciones registradas.");
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al mostrar las refacciones: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_MostrarRefaccionActionPerformed

    private void EliminarRefaccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarRefaccionActionPerformed
        try {
            // Solicitar el ID de la refacción a eliminar
            String idTexto = JOptionPane.showInputDialog(this, "Ingrese el ID de la refacción a eliminar:");
            if (idTexto == null || idTexto.trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "El ID de la refacción no puede estar vacío.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            int idRefaccion;
            try {
                idRefaccion = Integer.parseInt(idTexto.trim());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "El ID debe ser un número válido.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Verificar si la refacción existe
            if (!GestionarRefacciones.existeRefaccion(conn, idRefaccion)) {
                JOptionPane.showMessageDialog(this, "La refacción con ID " + idRefaccion + " no existe.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Confirmar la eliminación
            int confirmacion = JOptionPane.showConfirmDialog(this, "¿Está seguro de que desea eliminar la refacción con ID " + idRefaccion + "?", "Confirmación", JOptionPane.YES_NO_OPTION);
            if (confirmacion == JOptionPane.YES_OPTION) {
                // Llamar al método para eliminar la refacción
                boolean resultado = GestionarRefacciones.eliminarRefaccion(conn, idRefaccion);

                if (resultado) {
                    JOptionPane.showMessageDialog(this, "Refacción eliminada exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "Error al eliminar la refacción.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al eliminar la refacción: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_EliminarRefaccionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        Connection conn = ConnectDB.getConnection(); // Obtenemos la conexión a la base de datos

        if (conn == null) {
            System.out.println("Error: No se pudo establecer conexión con la base de datos.");
            return;
        }
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JF_Refacciones(conn).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton EliminarRefaccion;
    private javax.swing.JButton ModificarRefaccion;
    private javax.swing.JButton MostrarRefaccion;
    private javax.swing.JButton RegistrarRefaccion;
    private javax.swing.JTextField TextFieldCosto;
    private javax.swing.JTextField TextFieldDescripcion;
    private javax.swing.JTextField TextFieldNombre;
    private javax.swing.JTextArea VerRefacciones;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
