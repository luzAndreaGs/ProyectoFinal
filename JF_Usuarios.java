package proyectoFinal;
import java.sql.Connection;
import javax.swing.JOptionPane;
import java.sql.*;


public class JF_Usuarios extends javax.swing.JFrame {
    private Connection conn;

    /**
     * Creates new form JF_Usuarios
     */
    public JF_Usuarios(Connection conn) {
        this.conn = conn; // Guardamos la conexión
        initComponents(); // Inicializamos los componentes gráficos
        
        // Cambiar el comportamiento al cerrar la ventana
        this.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        // Añadir un WindowListener para regresar al menú al cerrar
        this.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent evt) {
                regresarAlMenu();
            }
        });
    }
    
    // Método para regresar al menú principal
    private void regresarAlMenu() {
        new JF_Menu(conn).setVisible(true); // Abre el menú principal
        this.dispose();
    }
    
    private void limpiarCampos() {
        TextFieldNombre.setText("");
        TextFieldPaterno.setText("");
        TextFieldMaterno.setText("");
        TextFieldEdad.setText("");
        TextFieldTelefono.setText("");
        TextFieldEmail.setText("");
        TextFieldUssername.setText("");
        TextFieldContraseña.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        TextFieldNombre = new javax.swing.JTextField();
        TextFieldPaterno = new javax.swing.JTextField();
        TextFieldMaterno = new javax.swing.JTextField();
        TextFieldTelefono = new javax.swing.JTextField();
        TextFieldEdad = new javax.swing.JTextField();
        TextFieldEmail = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        TextFieldUssername = new javax.swing.JTextField();
        TextFieldContraseña = new javax.swing.JTextField();
        RegistrarUsuarios = new javax.swing.JButton();
        ModificarUsuarios = new javax.swing.JButton();
        EliminarUsuarios = new javax.swing.JButton();
        MostrarUsuarios = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        VerUsuarios = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Gestión de Usuarios");

        jLabel2.setText("Nombre:");

        jLabel3.setText("Apellido Materno:");

        jLabel4.setText("Apellido Paterno:");

        jLabel5.setText("Teléfono:");

        jLabel6.setText("Edad:");

        jLabel7.setText("E-mail:");

        TextFieldNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextFieldNombreActionPerformed(evt);
            }
        });

        TextFieldPaterno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextFieldPaternoActionPerformed(evt);
            }
        });

        TextFieldMaterno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextFieldMaternoActionPerformed(evt);
            }
        });

        TextFieldTelefono.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextFieldTelefonoActionPerformed(evt);
            }
        });

        TextFieldEdad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextFieldEdadActionPerformed(evt);
            }
        });

        TextFieldEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextFieldEmailActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel8.setText("Nombre de usuario:");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel9.setText("Contraseña:");

        TextFieldUssername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextFieldUssernameActionPerformed(evt);
            }
        });

        TextFieldContraseña.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextFieldContraseñaActionPerformed(evt);
            }
        });

        RegistrarUsuarios.setText("Registrar");
        RegistrarUsuarios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegistrarUsuariosActionPerformed(evt);
            }
        });

        ModificarUsuarios.setText("Modificar");
        ModificarUsuarios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModificarUsuariosActionPerformed(evt);
            }
        });

        EliminarUsuarios.setText("Eliminar");
        EliminarUsuarios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarUsuariosActionPerformed(evt);
            }
        });

        MostrarUsuarios.setText("Mostrar");
        MostrarUsuarios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MostrarUsuariosActionPerformed(evt);
            }
        });

        VerUsuarios.setColumns(20);
        VerUsuarios.setRows(5);
        jScrollPane1.setViewportView(VerUsuarios);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TextFieldNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(TextFieldEdad, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TextFieldPaterno, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TextFieldMaterno, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TextFieldTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TextFieldEmail))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(209, 209, 209)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(RegistrarUsuarios, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ModificarUsuarios, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(EliminarUsuarios, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(MostrarUsuarios, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(96, 96, 96)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TextFieldUssername, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TextFieldContraseña)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TextFieldMaterno, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(jLabel4)
                        .addComponent(TextFieldNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(TextFieldPaterno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel5)
                    .addComponent(jLabel7)
                    .addComponent(TextFieldEdad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TextFieldTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TextFieldEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(TextFieldUssername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(TextFieldContraseña, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RegistrarUsuarios)
                    .addComponent(EliminarUsuarios)
                    .addComponent(MostrarUsuarios)
                    .addComponent(ModificarUsuarios))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TextFieldNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextFieldNombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextFieldNombreActionPerformed

    private void TextFieldPaternoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextFieldPaternoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextFieldPaternoActionPerformed

    private void TextFieldMaternoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextFieldMaternoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextFieldMaternoActionPerformed

    private void TextFieldTelefonoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextFieldTelefonoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextFieldTelefonoActionPerformed

    private void TextFieldEdadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextFieldEdadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextFieldEdadActionPerformed

    private void TextFieldEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextFieldEmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextFieldEmailActionPerformed

    private void TextFieldUssernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextFieldUssernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextFieldUssernameActionPerformed

    private void TextFieldContraseñaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextFieldContraseñaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextFieldContraseñaActionPerformed

    private void RegistrarUsuariosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegistrarUsuariosActionPerformed
            try {
            // Validar que todos los campos están llenos
            if (TextFieldNombre.getText().trim().isEmpty() ||
                TextFieldPaterno.getText().trim().isEmpty() ||
                TextFieldMaterno.getText().trim().isEmpty() ||
                TextFieldEdad.getText().trim().isEmpty() ||
                TextFieldTelefono.getText().trim().isEmpty() ||
                TextFieldEmail.getText().trim().isEmpty() ||
                TextFieldUssername.getText().trim().isEmpty() ||
                TextFieldContraseña.getText().trim().isEmpty()) {

                JOptionPane.showMessageDialog(this, "Todos los campos son obligatorios.", "Advertencia", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Recoger los datos del formulario
            String nombre = TextFieldNombre.getText().trim();
            String apellidoPaterno = TextFieldPaterno.getText().trim();
            String apellidoMaterno = TextFieldMaterno.getText().trim();
            int edad = Integer.parseInt(TextFieldEdad.getText().trim());
            String telefono = TextFieldTelefono.getText().trim();
            String email = TextFieldEmail.getText().trim();
            String ussername = TextFieldUssername.getText().trim();
            String contraseña = TextFieldContraseña.getText().trim();

            // Insertar en la base de datos usando el método en GestionarUsuarios
            GestionarUsuarios.registrarUsuario(conn, nombre, apellidoPaterno, apellidoMaterno, edad, telefono, email, ussername, contraseña);

            // Mostrar mensaje de éxito y limpiar los campos
            JOptionPane.showMessageDialog(this, "Usuario registrado exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            limpiarCampos();
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "La edad debe ser un número válido.", "Error de formato", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al registrar el usuario: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_RegistrarUsuariosActionPerformed

    private void ModificarUsuariosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModificarUsuariosActionPerformed
        try {
            // Validar que todos los campos están llenos
            if (TextFieldNombre.getText().trim().isEmpty() ||
                TextFieldPaterno.getText().trim().isEmpty() ||
                TextFieldMaterno.getText().trim().isEmpty() ||
                TextFieldEdad.getText().trim().isEmpty() ||
                TextFieldTelefono.getText().trim().isEmpty() ||
                TextFieldEmail.getText().trim().isEmpty() ||
                TextFieldUssername.getText().trim().isEmpty() ||
                TextFieldContraseña.getText().trim().isEmpty()) {

                JOptionPane.showMessageDialog(this, "Todos los campos son obligatorios.", "Advertencia", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Obtener el ID del usuario a modificar
            int idUsuario;
            try {
                idUsuario = Integer.parseInt(JOptionPane.showInputDialog(this, "Ingrese el ID del usuario a modificar:"));
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Por favor, ingrese un ID de usuario válido.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Verificar si el usuario existe
            if (!GestionarUsuarios.existeUsuario(conn, idUsuario)) {
                JOptionPane.showMessageDialog(this, "El usuario con el ID " + idUsuario + " no existe.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Recoger los datos del formulario
            String nuevoNombre = TextFieldNombre.getText().trim();
            String nuevoApellidoPaterno = TextFieldPaterno.getText().trim();
            String nuevoApellidoMaterno = TextFieldMaterno.getText().trim();
            int nuevaEdad = Integer.parseInt(TextFieldEdad.getText().trim());
            String nuevoTelefono = TextFieldTelefono.getText().trim();
            String nuevoEmail = TextFieldEmail.getText().trim();
            String nuevoUssername = TextFieldUssername.getText().trim();
            String nuevaContraseña = TextFieldContraseña.getText().trim();

            // Llamar al método de modificar en GestionarUsuarios
            GestionarUsuarios.modificarUsuario(conn, idUsuario, nuevoNombre, nuevoApellidoPaterno, nuevoApellidoMaterno, nuevaEdad, nuevoTelefono, nuevoEmail, nuevoUssername, nuevaContraseña);

            // Mostrar mensaje de éxito y limpiar los campos
            JOptionPane.showMessageDialog(this, "Usuario modificado exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            limpiarCampos();
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese datos válidos en los campos correspondientes.", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al modificar el usuario: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_ModificarUsuariosActionPerformed

    private void EliminarUsuariosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarUsuariosActionPerformed
        try {
            // Solicitar el ID del usuario a eliminar
            String input = JOptionPane.showInputDialog(this, "Ingrese el ID del usuario a eliminar:", "Eliminar Usuario", JOptionPane.QUESTION_MESSAGE);

            // Validar si el usuario ingresó un valor
            if (input == null || input.trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Debe ingresar un ID válido.", "Advertencia", JOptionPane.WARNING_MESSAGE);
                return;
            }

            int idUsuario;
            try {
                idUsuario = Integer.parseInt(input.trim());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "El ID debe ser un número válido.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Verificar si el usuario existe
            if (!GestionarUsuarios.existeUsuario(conn, idUsuario)) {
                JOptionPane.showMessageDialog(this, "El usuario con ID " + idUsuario + " no existe.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Confirmar eliminación
            int confirmacion = JOptionPane.showConfirmDialog(this, "¿Está seguro de que desea eliminar el usuario con ID " + idUsuario + "?", "Confirmación", JOptionPane.YES_NO_OPTION);
            if (confirmacion != JOptionPane.YES_OPTION) {
                return;
            }

            // Llamar al método para eliminar el usuario
            GestionarUsuarios.eliminarUsuario(conn, idUsuario);

            // Mostrar mensaje de éxito y limpiar los campos
            JOptionPane.showMessageDialog(this, "Usuario eliminado exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            limpiarCampos();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al eliminar el usuario: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_EliminarUsuariosActionPerformed

    private void MostrarUsuariosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MostrarUsuariosActionPerformed
        try {
            // Validar la conexión
            if (conn == null) {
                JOptionPane.showMessageDialog(this, "Error: No hay conexión a la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Consulta para obtener todos los usuarios
            String query = "SELECT u.idUsuario, p.nombre, p.apellidoPaterno, p.apellidoMaterno, p.telefono, p.email, u.nombreUsuario " +
                           "FROM Usuario u " +
                           "JOIN Persona p ON u.idPersona = p.idPersona";

            try (PreparedStatement stmt = conn.prepareStatement(query)) {
                ResultSet rs = stmt.executeQuery();

                // Crear un StringBuilder para construir el texto de salida
                StringBuilder usuarios = new StringBuilder();
                usuarios.append("===== Lista de Usuarios =====\n\n");

                // Iterar por cada resultado
                while (rs.next()) {
                    usuarios.append("ID Usuario: ").append(rs.getInt("idUsuario")).append("\n")
                            .append("Nombre: ").append(rs.getString("nombre")).append(" ")
                            .append(rs.getString("apellidoPaterno")).append(" ")
                            .append(rs.getString("apellidoMaterno")).append("\n")
                            .append("Teléfono: ").append(rs.getString("telefono")).append("\n")
                            .append("Email: ").append(rs.getString("email")).append("\n")
                            .append("Username: ").append(rs.getString("nombreUsuario")).append("\n")
                            .append("----------------------------------------\n");
                }

                // Verificar si hay usuarios encontrados
                if (usuarios.length() > 0) {
                    VerUsuarios.setText(usuarios.toString());
                } else {
                    VerUsuarios.setText("No se encontraron usuarios registrados.");
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al mostrar los usuarios: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_MostrarUsuariosActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        Connection conn = ConnectDB.getConnection(); // Obtenemos la conexión a la base de datos

        if (conn == null) {
            System.out.println("Error: No se pudo establecer conexión con la base de datos.");
            return;
        }
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JF_Usuarios(conn).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton EliminarUsuarios;
    private javax.swing.JButton ModificarUsuarios;
    private javax.swing.JButton MostrarUsuarios;
    private javax.swing.JButton RegistrarUsuarios;
    private javax.swing.JTextField TextFieldContraseña;
    private javax.swing.JTextField TextFieldEdad;
    private javax.swing.JTextField TextFieldEmail;
    private javax.swing.JTextField TextFieldMaterno;
    private javax.swing.JTextField TextFieldNombre;
    private javax.swing.JTextField TextFieldPaterno;
    private javax.swing.JTextField TextFieldTelefono;
    private javax.swing.JTextField TextFieldUssername;
    private javax.swing.JTextArea VerUsuarios;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
